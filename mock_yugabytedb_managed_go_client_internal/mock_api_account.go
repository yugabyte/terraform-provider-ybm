// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yugabyte/yugabytedb-managed-go-client-internal (interfaces: AccountApi)

// Package mock_yugabytedb_managed_go_client_internal is a generated GoMock package.
package mock_yugabytedb_managed_go_client_internal

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openapi "github.com/yugabyte/yugabytedb-managed-go-client-internal"
)

// MockAccountApi is a mock of AccountApi interface.
type MockAccountApi struct {
	ctrl     *gomock.Controller
	recorder *MockAccountApiMockRecorder
}

// MockAccountApiMockRecorder is the mock recorder for MockAccountApi.
type MockAccountApiMockRecorder struct {
	mock *MockAccountApi
}

// NewMockAccountApi creates a new mock instance.
func NewMockAccountApi(ctrl *gomock.Controller) *MockAccountApi {
	mock := &MockAccountApi{ctrl: ctrl}
	mock.recorder = &MockAccountApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountApi) EXPECT() *MockAccountApiMockRecorder {
	return m.recorder
}

// BatchInviteAccountUsers mocks base method.
func (m *MockAccountApi) BatchInviteAccountUsers(arg0 context.Context, arg1 string) openapi.ApiBatchInviteAccountUsersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInviteAccountUsers", arg0, arg1)
	ret0, _ := ret[0].(openapi.ApiBatchInviteAccountUsersRequest)
	return ret0
}

// BatchInviteAccountUsers indicates an expected call of BatchInviteAccountUsers.
func (mr *MockAccountApiMockRecorder) BatchInviteAccountUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInviteAccountUsers", reflect.TypeOf((*MockAccountApi)(nil).BatchInviteAccountUsers), arg0, arg1)
}

// BatchInviteAccountUsersExecute mocks base method.
func (m *MockAccountApi) BatchInviteAccountUsersExecute(arg0 openapi.ApiBatchInviteAccountUsersRequest) (openapi.BatchInviteUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInviteAccountUsersExecute", arg0)
	ret0, _ := ret[0].(openapi.BatchInviteUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BatchInviteAccountUsersExecute indicates an expected call of BatchInviteAccountUsersExecute.
func (mr *MockAccountApiMockRecorder) BatchInviteAccountUsersExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInviteAccountUsersExecute", reflect.TypeOf((*MockAccountApi)(nil).BatchInviteAccountUsersExecute), arg0)
}

// GetAccount mocks base method.
func (m *MockAccountApi) GetAccount(arg0 context.Context, arg1 string) openapi.ApiGetAccountRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(openapi.ApiGetAccountRequest)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountApiMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountApi)(nil).GetAccount), arg0, arg1)
}

// GetAccountExecute mocks base method.
func (m *MockAccountApi) GetAccountExecute(arg0 openapi.ApiGetAccountRequest) (openapi.AccountResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountExecute", arg0)
	ret0, _ := ret[0].(openapi.AccountResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccountExecute indicates an expected call of GetAccountExecute.
func (mr *MockAccountApiMockRecorder) GetAccountExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountExecute", reflect.TypeOf((*MockAccountApi)(nil).GetAccountExecute), arg0)
}

// GetAccountQuotas mocks base method.
func (m *MockAccountApi) GetAccountQuotas(arg0 context.Context, arg1 string) openapi.ApiGetAccountQuotasRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountQuotas", arg0, arg1)
	ret0, _ := ret[0].(openapi.ApiGetAccountQuotasRequest)
	return ret0
}

// GetAccountQuotas indicates an expected call of GetAccountQuotas.
func (mr *MockAccountApiMockRecorder) GetAccountQuotas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountQuotas", reflect.TypeOf((*MockAccountApi)(nil).GetAccountQuotas), arg0, arg1)
}

// GetAccountQuotasExecute mocks base method.
func (m *MockAccountApi) GetAccountQuotasExecute(arg0 openapi.ApiGetAccountQuotasRequest) (openapi.AccountQuotaResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountQuotasExecute", arg0)
	ret0, _ := ret[0].(openapi.AccountQuotaResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccountQuotasExecute indicates an expected call of GetAccountQuotasExecute.
func (mr *MockAccountApiMockRecorder) GetAccountQuotasExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountQuotasExecute", reflect.TypeOf((*MockAccountApi)(nil).GetAccountQuotasExecute), arg0)
}

// GetAccountUser mocks base method.
func (m *MockAccountApi) GetAccountUser(arg0 context.Context, arg1, arg2 string) openapi.ApiGetAccountUserRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(openapi.ApiGetAccountUserRequest)
	return ret0
}

// GetAccountUser indicates an expected call of GetAccountUser.
func (mr *MockAccountApiMockRecorder) GetAccountUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountUser", reflect.TypeOf((*MockAccountApi)(nil).GetAccountUser), arg0, arg1, arg2)
}

// GetAccountUserExecute mocks base method.
func (m *MockAccountApi) GetAccountUserExecute(arg0 openapi.ApiGetAccountUserRequest) (openapi.UserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountUserExecute", arg0)
	ret0, _ := ret[0].(openapi.UserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccountUserExecute indicates an expected call of GetAccountUserExecute.
func (mr *MockAccountApiMockRecorder) GetAccountUserExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountUserExecute", reflect.TypeOf((*MockAccountApi)(nil).GetAccountUserExecute), arg0)
}

// GetAllowedLoginTypes mocks base method.
func (m *MockAccountApi) GetAllowedLoginTypes(arg0 context.Context, arg1 string) openapi.ApiGetAllowedLoginTypesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllowedLoginTypes", arg0, arg1)
	ret0, _ := ret[0].(openapi.ApiGetAllowedLoginTypesRequest)
	return ret0
}

// GetAllowedLoginTypes indicates an expected call of GetAllowedLoginTypes.
func (mr *MockAccountApiMockRecorder) GetAllowedLoginTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllowedLoginTypes", reflect.TypeOf((*MockAccountApi)(nil).GetAllowedLoginTypes), arg0, arg1)
}

// GetAllowedLoginTypesExecute mocks base method.
func (m *MockAccountApi) GetAllowedLoginTypesExecute(arg0 openapi.ApiGetAllowedLoginTypesRequest) (openapi.AllowedLoginTypesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllowedLoginTypesExecute", arg0)
	ret0, _ := ret[0].(openapi.AllowedLoginTypesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllowedLoginTypesExecute indicates an expected call of GetAllowedLoginTypesExecute.
func (mr *MockAccountApiMockRecorder) GetAllowedLoginTypesExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllowedLoginTypesExecute", reflect.TypeOf((*MockAccountApi)(nil).GetAllowedLoginTypesExecute), arg0)
}

// InviteAccountUser mocks base method.
func (m *MockAccountApi) InviteAccountUser(arg0 context.Context, arg1 string) openapi.ApiInviteAccountUserRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteAccountUser", arg0, arg1)
	ret0, _ := ret[0].(openapi.ApiInviteAccountUserRequest)
	return ret0
}

// InviteAccountUser indicates an expected call of InviteAccountUser.
func (mr *MockAccountApiMockRecorder) InviteAccountUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteAccountUser", reflect.TypeOf((*MockAccountApi)(nil).InviteAccountUser), arg0, arg1)
}

// InviteAccountUserExecute mocks base method.
func (m *MockAccountApi) InviteAccountUserExecute(arg0 openapi.ApiInviteAccountUserRequest) (openapi.InviteUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteAccountUserExecute", arg0)
	ret0, _ := ret[0].(openapi.InviteUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InviteAccountUserExecute indicates an expected call of InviteAccountUserExecute.
func (mr *MockAccountApiMockRecorder) InviteAccountUserExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteAccountUserExecute", reflect.TypeOf((*MockAccountApi)(nil).InviteAccountUserExecute), arg0)
}

// ListAccountUsers mocks base method.
func (m *MockAccountApi) ListAccountUsers(arg0 context.Context, arg1 string) openapi.ApiListAccountUsersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountUsers", arg0, arg1)
	ret0, _ := ret[0].(openapi.ApiListAccountUsersRequest)
	return ret0
}

// ListAccountUsers indicates an expected call of ListAccountUsers.
func (mr *MockAccountApiMockRecorder) ListAccountUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountUsers", reflect.TypeOf((*MockAccountApi)(nil).ListAccountUsers), arg0, arg1)
}

// ListAccountUsersExecute mocks base method.
func (m *MockAccountApi) ListAccountUsersExecute(arg0 openapi.ApiListAccountUsersRequest) (openapi.UserListResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountUsersExecute", arg0)
	ret0, _ := ret[0].(openapi.UserListResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAccountUsersExecute indicates an expected call of ListAccountUsersExecute.
func (mr *MockAccountApiMockRecorder) ListAccountUsersExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountUsersExecute", reflect.TypeOf((*MockAccountApi)(nil).ListAccountUsersExecute), arg0)
}

// ListAccounts mocks base method.
func (m *MockAccountApi) ListAccounts(arg0 context.Context) openapi.ApiListAccountsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0)
	ret0, _ := ret[0].(openapi.ApiListAccountsRequest)
	return ret0
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockAccountApiMockRecorder) ListAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockAccountApi)(nil).ListAccounts), arg0)
}

// ListAccountsExecute mocks base method.
func (m *MockAccountApi) ListAccountsExecute(arg0 openapi.ApiListAccountsRequest) (openapi.AccountListResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsExecute", arg0)
	ret0, _ := ret[0].(openapi.AccountListResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAccountsExecute indicates an expected call of ListAccountsExecute.
func (mr *MockAccountApiMockRecorder) ListAccountsExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsExecute", reflect.TypeOf((*MockAccountApi)(nil).ListAccountsExecute), arg0)
}

// ModifyAccount mocks base method.
func (m *MockAccountApi) ModifyAccount(arg0 context.Context, arg1 string) openapi.ApiModifyAccountRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyAccount", arg0, arg1)
	ret0, _ := ret[0].(openapi.ApiModifyAccountRequest)
	return ret0
}

// ModifyAccount indicates an expected call of ModifyAccount.
func (mr *MockAccountApiMockRecorder) ModifyAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyAccount", reflect.TypeOf((*MockAccountApi)(nil).ModifyAccount), arg0, arg1)
}

// ModifyAccountExecute mocks base method.
func (m *MockAccountApi) ModifyAccountExecute(arg0 openapi.ApiModifyAccountRequest) (openapi.AccountResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyAccountExecute", arg0)
	ret0, _ := ret[0].(openapi.AccountResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ModifyAccountExecute indicates an expected call of ModifyAccountExecute.
func (mr *MockAccountApiMockRecorder) ModifyAccountExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyAccountExecute", reflect.TypeOf((*MockAccountApi)(nil).ModifyAccountExecute), arg0)
}

// ModifyAllowedLoginTypes mocks base method.
func (m *MockAccountApi) ModifyAllowedLoginTypes(arg0 context.Context, arg1 string) openapi.ApiModifyAllowedLoginTypesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyAllowedLoginTypes", arg0, arg1)
	ret0, _ := ret[0].(openapi.ApiModifyAllowedLoginTypesRequest)
	return ret0
}

// ModifyAllowedLoginTypes indicates an expected call of ModifyAllowedLoginTypes.
func (mr *MockAccountApiMockRecorder) ModifyAllowedLoginTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyAllowedLoginTypes", reflect.TypeOf((*MockAccountApi)(nil).ModifyAllowedLoginTypes), arg0, arg1)
}

// ModifyAllowedLoginTypesExecute mocks base method.
func (m *MockAccountApi) ModifyAllowedLoginTypesExecute(arg0 openapi.ApiModifyAllowedLoginTypesRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyAllowedLoginTypesExecute", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyAllowedLoginTypesExecute indicates an expected call of ModifyAllowedLoginTypesExecute.
func (mr *MockAccountApiMockRecorder) ModifyAllowedLoginTypesExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyAllowedLoginTypesExecute", reflect.TypeOf((*MockAccountApi)(nil).ModifyAllowedLoginTypesExecute), arg0)
}

// ModifyUserRole mocks base method.
func (m *MockAccountApi) ModifyUserRole(arg0 context.Context, arg1, arg2 string) openapi.ApiModifyUserRoleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyUserRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(openapi.ApiModifyUserRoleRequest)
	return ret0
}

// ModifyUserRole indicates an expected call of ModifyUserRole.
func (mr *MockAccountApiMockRecorder) ModifyUserRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyUserRole", reflect.TypeOf((*MockAccountApi)(nil).ModifyUserRole), arg0, arg1, arg2)
}

// ModifyUserRoleExecute mocks base method.
func (m *MockAccountApi) ModifyUserRoleExecute(arg0 openapi.ApiModifyUserRoleRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyUserRoleExecute", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyUserRoleExecute indicates an expected call of ModifyUserRoleExecute.
func (mr *MockAccountApiMockRecorder) ModifyUserRoleExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyUserRoleExecute", reflect.TypeOf((*MockAccountApi)(nil).ModifyUserRoleExecute), arg0)
}

// RemoveAccountUser mocks base method.
func (m *MockAccountApi) RemoveAccountUser(arg0 context.Context, arg1, arg2 string) openapi.ApiRemoveAccountUserRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccountUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(openapi.ApiRemoveAccountUserRequest)
	return ret0
}

// RemoveAccountUser indicates an expected call of RemoveAccountUser.
func (mr *MockAccountApiMockRecorder) RemoveAccountUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountUser", reflect.TypeOf((*MockAccountApi)(nil).RemoveAccountUser), arg0, arg1, arg2)
}

// RemoveAccountUserExecute mocks base method.
func (m *MockAccountApi) RemoveAccountUserExecute(arg0 openapi.ApiRemoveAccountUserRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccountUserExecute", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccountUserExecute indicates an expected call of RemoveAccountUserExecute.
func (mr *MockAccountApiMockRecorder) RemoveAccountUserExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountUserExecute", reflect.TypeOf((*MockAccountApi)(nil).RemoveAccountUserExecute), arg0)
}
