// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yugabyte/yugabytedb-managed-go-client-internal (interfaces: ProjectApi)

// Package mock_yugabytedb_managed_go_client_internal is a generated GoMock package.
package mock_yugabytedb_managed_go_client_internal

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openapi "github.com/yugabyte/yugabytedb-managed-go-client-internal"
)

// MockProjectApi is a mock of ProjectApi interface.
type MockProjectApi struct {
	ctrl     *gomock.Controller
	recorder *MockProjectApiMockRecorder
}

// MockProjectApiMockRecorder is the mock recorder for MockProjectApi.
type MockProjectApiMockRecorder struct {
	mock *MockProjectApi
}

// NewMockProjectApi creates a new mock instance.
func NewMockProjectApi(ctrl *gomock.Controller) *MockProjectApi {
	mock := &MockProjectApi{ctrl: ctrl}
	mock.recorder = &MockProjectApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectApi) EXPECT() *MockProjectApiMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectApi) CreateProject(arg0 context.Context, arg1 string) openapi.ApiCreateProjectRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(openapi.ApiCreateProjectRequest)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectApiMockRecorder) CreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectApi)(nil).CreateProject), arg0, arg1)
}

// CreateProjectExecute mocks base method.
func (m *MockProjectApi) CreateProjectExecute(arg0 openapi.ApiCreateProjectRequest) (openapi.ProjectResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectExecute", arg0)
	ret0, _ := ret[0].(openapi.ProjectResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectExecute indicates an expected call of CreateProjectExecute.
func (mr *MockProjectApiMockRecorder) CreateProjectExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectExecute", reflect.TypeOf((*MockProjectApi)(nil).CreateProjectExecute), arg0)
}

// DeleteProject mocks base method.
func (m *MockProjectApi) DeleteProject(arg0 context.Context, arg1, arg2 string) openapi.ApiDeleteProjectRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(openapi.ApiDeleteProjectRequest)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectApiMockRecorder) DeleteProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectApi)(nil).DeleteProject), arg0, arg1, arg2)
}

// DeleteProjectExecute mocks base method.
func (m *MockProjectApi) DeleteProjectExecute(arg0 openapi.ApiDeleteProjectRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectExecute", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectExecute indicates an expected call of DeleteProjectExecute.
func (mr *MockProjectApiMockRecorder) DeleteProjectExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectExecute", reflect.TypeOf((*MockProjectApi)(nil).DeleteProjectExecute), arg0)
}

// GetProject mocks base method.
func (m *MockProjectApi) GetProject(arg0 context.Context, arg1, arg2 string) openapi.ApiGetProjectRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(openapi.ApiGetProjectRequest)
	return ret0
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectApiMockRecorder) GetProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectApi)(nil).GetProject), arg0, arg1, arg2)
}

// GetProjectExecute mocks base method.
func (m *MockProjectApi) GetProjectExecute(arg0 openapi.ApiGetProjectRequest) (openapi.ProjectResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectExecute", arg0)
	ret0, _ := ret[0].(openapi.ProjectResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectExecute indicates an expected call of GetProjectExecute.
func (mr *MockProjectApiMockRecorder) GetProjectExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectExecute", reflect.TypeOf((*MockProjectApi)(nil).GetProjectExecute), arg0)
}

// ListProjects mocks base method.
func (m *MockProjectApi) ListProjects(arg0 context.Context, arg1 string) openapi.ApiListProjectsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0, arg1)
	ret0, _ := ret[0].(openapi.ApiListProjectsRequest)
	return ret0
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockProjectApiMockRecorder) ListProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectApi)(nil).ListProjects), arg0, arg1)
}

// ListProjectsExecute mocks base method.
func (m *MockProjectApi) ListProjectsExecute(arg0 openapi.ApiListProjectsRequest) (openapi.ProjectListResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsExecute", arg0)
	ret0, _ := ret[0].(openapi.ProjectListResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectsExecute indicates an expected call of ListProjectsExecute.
func (mr *MockProjectApiMockRecorder) ListProjectsExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsExecute", reflect.TypeOf((*MockProjectApi)(nil).ListProjectsExecute), arg0)
}
